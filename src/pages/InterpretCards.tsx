import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card } from "@/components/ui/card";
import { Textarea } from "@/components/ui/textarea";
import { Label } from "@/components/ui/label";
import { Eye, Plus, X } from "lucide-react";
import { toast } from "sonner";
import Navigation from "@/components/Navigation";

// Mock tarot cards data
const tarotCards = [
  "The Fool", "The Magician", "The High Priestess", "The Empress", "The Emperor",
  "The Hierophant", "The Lovers", "The Chariot", "Strength", "The Hermit",
  "Wheel of Fortune", "Justice", "The Hanged Man", "Death", "Temperance",
  "The Devil", "The Tower", "The Star", "The Moon", "The Sun",
  "Judgement", "The World"
];

const InterpretCards = () => {
  const [question, setQuestion] = useState("");
  const [selectedCards, setSelectedCards] = useState<string[]>([]);
  const [interpretation, setInterpretation] = useState("");
  const [showCardList, setShowCardList] = useState(false);

  const addCard = (card: string) => {
    if (!selectedCards.includes(card)) {
      setSelectedCards([...selectedCards, card]);
      toast.success(`ƒê√£ th√™m ${card}`);
    } else {
      toast.error("L√° b√†i n√†y ƒë√£ ƒë∆∞·ª£c ch·ªçn");
    }
  };

  const removeCard = (index: number) => {
    const newCards = selectedCards.filter((_, i) => i !== index);
    setSelectedCards(newCards);
  };

  const interpretCards = async () => {
    if (!question.trim()) {
      toast.error("Vui l√≤ng nh·∫≠p c√¢u h·ªèi");
      return;
    }
    
    if (selectedCards.length === 0) {
      toast.error("Vui l√≤ng ch·ªçn √≠t nh·∫•t 1 l√° b√†i");
      return;
    }

    // This would be where you call your AI API
    const prompt = `B·∫°n l√† m·ªôt tarot reader chuy√™n nghi·ªáp v√† kh·∫£ nƒÉng gi·∫£i nghƒ©a r·∫•t s√¢u s·∫Øc t·ª´ c√°c l√° b√†i theo nh·ªØng b·ªëi c·∫£nh c√¢u h·ªèi kh√°c nhau.
C√¢u h·ªèi c·ªßa t√¥i l√†: ${question}
Tr·∫£i b√†i c·ªßa t√¥i l√†: ${selectedCards.join(", ")}`;

    // Mock interpretation for now
    setInterpretation(`D·ª±a tr√™n c√¢u h·ªèi "${question}" v√† nh·ªØng l√° b√†i b·∫°n ƒë√£ ch·ªçn: ${selectedCards.join(", ")}, ƒë√¢y l√† l·ªùi gi·∫£i nghƒ©a:

${selectedCards.map((card, index) => `üîÆ **${card}**: L√° b√†i n√†y th·ªÉ hi·ªán ${index === 0 ? 'kh√≠a c·∫°nh c·ªët l√µi' : index === 1 ? 'nh·ªØng th√°ch th·ª©c' : 'ti·ªÅm nƒÉng ph√°t tri·ªÉn'} trong v·∫•n ƒë·ªÅ b·∫°n quan t√¢m.`).join('\n\n')}

**T·ªïng quan**: S·ª± k·∫øt h·ª£p c·ªßa nh·ªØng l√° b√†i n√†y cho th·∫•y m·ªôt h√†nh tr√¨nh v·ªõi nhi·ªÅu kh√≠a c·∫°nh c·∫ßn ƒë∆∞·ª£c c√¢n nh·∫Øc k·ªπ l∆∞·ª°ng.

*L∆∞u √Ω: ƒê√¢y l√† gi·∫£i nghƒ©a m·∫´u. ƒê·ªÉ c√≥ k·∫øt qu·∫£ ch√≠nh x√°c, h·ªá th·ªëng c·∫ßn t√≠ch h·ª£p AI.*`);

    toast.success("ƒê√£ ho√†n th√†nh gi·∫£i nghƒ©a!");
  };

  return (
    <div className="min-h-screen bg-background p-6">
      <div className="max-w-4xl mx-auto">
        <Navigation />
        
        <Card className="p-8 shadow-card">
          <div className="text-center mb-8">
            <Eye className="h-12 w-12 mx-auto mb-4 text-primary animate-mystical-glow" />
            <h2 className="text-3xl font-bold mb-2">Gi·∫£i B√†i Tarot</h2>
            <p className="text-muted-foreground">Ch·ªçn nh·ªØng l√° b√†i b·∫°n ƒë√£ r√∫t v√† nh·∫≠n ƒë∆∞·ª£c l·ªùi gi·∫£i nghƒ©a</p>
          </div>

          <div className="space-y-6">
            <div>
              <Label htmlFor="question" className="text-lg font-semibold">
                C√¢u h·ªèi c·ªßa b·∫°n
              </Label>
              <Textarea
                id="question"
                placeholder="Nh·∫≠p c√¢u h·ªèi b·∫°n mu·ªën h·ªèi tarot..."
                value={question}
                onChange={(e) => setQuestion(e.target.value)}
                className="mt-2 min-h-[100px] bg-muted/50"
              />
            </div>

            <div>
              <div className="flex items-center justify-between mb-4">
                <Label className="text-lg font-semibold">
                  Nh·ªØng l√° b√†i ƒë√£ ch·ªçn ({selectedCards.length})
                </Label>
                <Button
                  onClick={() => setShowCardList(!showCardList)}
                  variant="outline"
                  className="border-primary text-primary hover:bg-primary hover:text-primary-foreground"
                >
                  <Plus className="mr-2 h-4 w-4" />
                  Th√™m B√†i
                </Button>
              </div>

              {selectedCards.length > 0 && (
                <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-3 mb-4">
                  {selectedCards.map((card, index) => (
                    <Card key={index} className="p-3 bg-gradient-mystical relative group">
                      <Button
                        onClick={() => removeCard(index)}
                        variant="ghost"
                        size="sm"
                        className="absolute -top-2 -right-2 h-6 w-6 p-0 bg-destructive text-destructive-foreground rounded-full opacity-0 group-hover:opacity-100 transition-opacity"
                      >
                        <X className="h-3 w-3" />
                      </Button>
                      <div className="text-center">
                        <div className="w-12 h-16 bg-primary/20 rounded mx-auto mb-2 flex items-center justify-center">
                          <Eye className="h-6 w-6 text-primary" />
                        </div>
                        <p className="text-sm font-medium text-primary-foreground">{card}</p>
                      </div>
                    </Card>
                  ))}
                </div>
              )}

              {showCardList && (
                <Card className="p-4 bg-muted/30">
                  <h4 className="font-semibold mb-3">Ch·ªçn l√° b√†i:</h4>
                  <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-2 max-h-60 overflow-y-auto">
                    {tarotCards.map((card) => (
                      <Button
                        key={card}
                        onClick={() => addCard(card)}
                        variant="outline"
                        size="sm"
                        className={`text-xs ${
                          selectedCards.includes(card) 
                            ? 'bg-primary text-primary-foreground' 
                            : 'hover:bg-primary/10'
                        }`}
                        disabled={selectedCards.includes(card)}
                      >
                        {card}
                      </Button>
                    ))}
                  </div>
                </Card>
              )}
            </div>

            <div className="text-center">
              <Button
                onClick={interpretCards}
                className="bg-gradient-gold text-secondary-foreground hover:scale-105 transition-all duration-300 px-8 py-3 text-lg"
              >
                <Eye className="mr-2 h-5 w-5" />
                Gi·∫£i Nghƒ©a B√†i
              </Button>
            </div>

            {interpretation && (
              <Card className="p-6 bg-muted/50">
                <h3 className="text-xl font-semibold mb-4 text-primary">L·ªùi Gi·∫£i Nghƒ©a</h3>
                <div className="whitespace-pre-line text-foreground">
                  {interpretation}
                </div>
              </Card>
            )}
          </div>
        </Card>
      </div>
    </div>
  );
};

export default InterpretCards;