import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card } from "@/components/ui/card";
import { Textarea } from "@/components/ui/textarea";
import { Label } from "@/components/ui/label";
import { Sparkles, Shuffle, Eye } from "lucide-react";
import { toast } from "sonner";
import Navigation from "@/components/Navigation";

// Mock tarot cards data
const tarotCards = [
  "The Fool", "The Magician", "The High Priestess", "The Empress", "The Emperor",
  "The Hierophant", "The Lovers", "The Chariot", "Strength", "The Hermit",
  "Wheel of Fortune", "Justice", "The Hanged Man", "Death", "Temperance",
  "The Devil", "The Tower", "The Star", "The Moon", "The Sun",
  "Judgement", "The World"
];

const DrawCards = () => {
  const [question, setQuestion] = useState("");
  const [drawnCards, setDrawnCards] = useState<string[]>([]);
  const [isDrawing, setIsDrawing] = useState(false);
  const [interpretation, setInterpretation] = useState("");

  const drawCards = () => {
    if (!question.trim()) {
      toast.error("Vui l√≤ng nh·∫≠p c√¢u h·ªèi tr∆∞·ªõc khi b·ªëc b√†i");
      return;
    }

    setIsDrawing(true);
    setInterpretation("");
    
    // Simulate card drawing animation
    setTimeout(() => {
      const shuffled = [...tarotCards].sort(() => Math.random() - 0.5);
      const drawn = shuffled.slice(0, 3); // Draw 3 cards for a simple spread
      setDrawnCards(drawn);
      setIsDrawing(false);
      toast.success("ƒê√£ b·ªëc ƒë∆∞·ª£c 3 l√° b√†i!");
    }, 2000);
  };

  const interpretCards = async () => {
    if (drawnCards.length === 0) {
      toast.error("Vui l√≤ng b·ªëc b√†i tr∆∞·ªõc khi gi·∫£i nghƒ©a");
      return;
    }

    // This would be where you call your AI API
    const prompt = `B·∫°n l√† m·ªôt tarot reader chuy√™n nghi·ªáp v√† kh·∫£ nƒÉng gi·∫£i nghƒ©a r·∫•t s√¢u s·∫Øc t·ª´ c√°c l√° b√†i theo nh·ªØng b·ªëi c·∫£nh c√¢u h·ªèi kh√°c nhau.
C√¢u h·ªèi c·ªßa t√¥i l√†: ${question}
Tr·∫£i b√†i c·ªßa t√¥i l√†: ${drawnCards.join(", ")}`;

    // Mock interpretation for now
    setInterpretation(`D·ª±a tr√™n c√¢u h·ªèi "${question}" v√† tr·∫£i b√†i ${drawnCards.join(", ")}, ƒë√¢y l√† l·ªùi gi·∫£i nghƒ©a:

üîÆ **Qu√° kh·ª© - ${drawnCards[0]}**: Th·ªÉ hi·ªán n·ªÅn t·∫£ng v√† nh·ªØng tr·∫£i nghi·ªám ƒë√£ qua ƒë√£ t·∫°o n√™n ho√†n c·∫£nh hi·ªán t·∫°i.

üîÆ **Hi·ªán t·∫°i - ${drawnCards[1]}**: Cho th·∫•y t√¨nh h√¨nh hi·ªán t·∫°i v√† nh·ªØng y·∫øu t·ªë ƒëang ·∫£nh h∆∞·ªüng ƒë·∫øn c√¢u h·ªèi c·ªßa b·∫°n.

üîÆ **T∆∞∆°ng lai - ${drawnCards[2]}**: Ch·ªâ ra h∆∞·ªõng ph√°t tri·ªÉn c√≥ th·ªÉ x·∫£y ra n·∫øu b·∫°n ti·∫øp t·ª•c theo con ƒë∆∞·ªùng hi·ªán t·∫°i.

*L∆∞u √Ω: ƒê√¢y l√† gi·∫£i nghƒ©a m·∫´u. ƒê·ªÉ c√≥ k·∫øt qu·∫£ ch√≠nh x√°c, h·ªá th·ªëng c·∫ßn t√≠ch h·ª£p AI.*`);

    toast.success("ƒê√£ ho√†n th√†nh gi·∫£i nghƒ©a!");
  };

  return (
    <div className="min-h-screen bg-background p-6">
      <div className="max-w-4xl mx-auto">
        <Navigation />
        
        <Card className="p-8 shadow-card">
          <div className="text-center mb-8">
            <Sparkles className="h-12 w-12 mx-auto mb-4 text-primary animate-mystical-glow" />
            <h2 className="text-3xl font-bold mb-2">B·ªëc B√†i Tarot</h2>
            <p className="text-muted-foreground">ƒê·∫∑t c√¢u h·ªèi v√† ƒë·ªÉ v≈© tr·ª• ch·ªçn b√†i cho b·∫°n</p>
          </div>

          <div className="space-y-6">
            <div>
              <Label htmlFor="question" className="text-lg font-semibold">
                C√¢u h·ªèi c·ªßa b·∫°n
              </Label>
              <Textarea
                id="question"
                placeholder="Nh·∫≠p c√¢u h·ªèi b·∫°n mu·ªën h·ªèi tarot..."
                value={question}
                onChange={(e) => setQuestion(e.target.value)}
                className="mt-2 min-h-[100px] bg-muted/50"
              />
            </div>

            <div className="text-center">
              <Button
                onClick={drawCards}
                disabled={isDrawing}
                className="bg-gradient-primary hover:scale-105 transition-all duration-300 px-8 py-3 text-lg"
              >
                {isDrawing ? (
                  <>
                    <Shuffle className="mr-2 h-5 w-5 animate-spin" />
                    ƒêang b·ªëc b√†i...
                  </>
                ) : (
                  <>
                    <Sparkles className="mr-2 h-5 w-5" />
                    B·ªëc B√†i
                  </>
                )}
              </Button>
            </div>

            {drawnCards.length > 0 && (
              <div className="space-y-6">
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  {drawnCards.map((card, index) => (
                    <Card key={index} className="p-6 text-center bg-gradient-mystical animate-float shadow-mystical">
                      <div className="mb-3">
                        <div className="w-16 h-24 bg-primary/20 rounded-lg mx-auto mb-3 flex items-center justify-center">
                          <Sparkles className="h-8 w-8 text-primary" />
                        </div>
                        <h3 className="font-semibold text-primary-foreground">{card}</h3>
                      </div>
                      <p className="text-sm text-primary-foreground/80">
                        {index === 0 ? "Qu√° kh·ª©" : index === 1 ? "Hi·ªán t·∫°i" : "T∆∞∆°ng lai"}
                      </p>
                    </Card>
                  ))}
                </div>

                <div className="text-center">
                  <Button
                    onClick={interpretCards}
                    className="bg-gradient-gold text-secondary-foreground hover:scale-105 transition-all duration-300"
                  >
                    <Eye className="mr-2 h-5 w-5" />
                    Gi·∫£i Nghƒ©a B√†i
                  </Button>
                </div>
              </div>
            )}

            {interpretation && (
              <Card className="p-6 bg-muted/50">
                <h3 className="text-xl font-semibold mb-4 text-primary">L·ªùi Gi·∫£i Nghƒ©a</h3>
                <div className="whitespace-pre-line text-foreground">
                  {interpretation}
                </div>
              </Card>
            )}
          </div>
        </Card>
      </div>
    </div>
  );
};

export default DrawCards;